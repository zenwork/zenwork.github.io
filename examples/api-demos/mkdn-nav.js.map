{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../src/lib/template.ts","webpack:///../src/lib/directive.ts","webpack:///../src/lib/render.ts","webpack:///../src/lib/template-instance.ts","webpack:///./src/shared/child-element.js","webpack:///./src/shared/util.js","webpack:///./src/shared/cooperation-events.js","webpack:///./src/shared/base-element.js","webpack:///./src/shared/index.js","webpack:///../src/lib/part.ts","webpack:///../src/directives/repeat.ts","webpack:///../src/lib/default-template-processor.ts","webpack:///src/lit-html.ts","webpack:///../src/lib/modify-template.ts","webpack:///../src/lib/shady-render.ts","webpack:///../src/lib/updating-element.ts","webpack:///../src/lib/decorators.ts","webpack:///src/lit-element.ts","webpack:///../src/lib/dom.ts","webpack:///../src/lib/parts.ts","webpack:///../src/lib/template-result.ts","webpack:///./src/shared/eventLinker.js","webpack:///./src/components/mkdn-nav.url.js","webpack:///./src/components/mkdn-nav.js","webpack:///./src/components/mkdn-nav.css.js","webpack:///../src/lib/template-factory.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","marker","concat","String","Math","random","slice","nodeMarker","markerRegex","RegExp","rewritesStyleAttribute","el","document","createElement","setAttribute","getAttribute","Template","result","element","_this","this","_classCallCheck","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","previousNode","currentNode","content","walker","createTreeWalker","nextNode","node","nodeType","hasAttributes","attributes","count","length","indexOf","stringForPart","strings","lastAttributeNameRegex","exec","attributeLookupName","test","toLowerCase","split","push","type","removeAttribute","tagName","nodeValue","parent","parentNode","_strings","lastIndex","_i","insertBefore","createMarker","createTextNode","_parent","previousSibling","Node","TEXT_NODE","nextSibling","_i2","_i3","removeChild","isTemplatePartActive","part","createComment","__webpack_exports__","directive","isDirective","directives","WeakMap","f","set","has","render","_dom_js__WEBPACK_IMPORTED_MODULE_0__","_parts_js__WEBPACK_IMPORTED_MODULE_1__","_template_factory_js__WEBPACK_IMPORTED_MODULE_2__","container","options","undefined","firstChild","assign","templateFactory","appendInto","setValue","commit","TemplateInstance","processor","_parts","_createClass","values","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_part","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","_template_js__WEBPACK_IMPORTED_MODULE_1__","_part2","handleTextExpression","insertAfterNode","_this$_parts","apply","_toConsumableArray","handleAttributeExpressions","nodeName","adoptNode","customElements","upgrade","ChildElement","_BaseElement","_possibleConstructorReturn","_getPrototypeOf","ancestor","siblings","_inherits","BaseElement","sibling","dispatchEvent","Events","createReady","findParent","createLeaving","ancestorSelector","that","byId","getElementById","closest","beforeJoining","addEventListener","JOIN_EVENT","event","detail","source","JOINER_ACCEPTED","initAdopted","JOINER_CATCHUP","hashcode","console","debug","onSiblingReady","PARENT_READY","join","JOINER_READY","includes","JOINER_LEAVING","findIndex","onSiblingLeaving","initOrphaned","createRequest","clone","obj","JSON","parse","stringify","JOINER_REQUEST","joiner","CustomEvent","acceptor","id","window","dev","_LitElement","Id","Class","constructor","TypeError","LitElement","attachShadow","define","Error","e","message","Index","sections","stories","defaultStory","keys","filter","url","story","noChange","repeat","_lit_html_js__WEBPACK_IMPORTED_MODULE_0__","createAndInsertPart","containerPart","beforePart","startNode","beforeNode","endNode","newPart","updatePart","insertPartBefore","ref","removePart","generateMap","list","start","end","map","Map","partListCache","keyListCache","items","keyFnOrTemplate","keyFn","arguments","newKeyToIndexMap","oldKeyToIndexMap","oldParts","oldKeys","newParts","newValues","newKeys","item","oldHead","oldTail","newHead","newTail","oldIndex","oldPart","_newPart","_oldPart","defaultTemplateProcessor","DefaultTemplateProcessor","prefix","eventContext","lit_html_html","template_result","template_instance","dom","template_factory","_len","Array","_key","walkerNodeFilter","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","removeNodesFromTemplate","modify_template_nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","DOCUMENT_FRAGMENT_NODE","lib_template","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","warn","TEMPLATE_TYPES","shadyRenderSet","Set","shady_render_prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","shady_render_removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","appendChild","insertNodeIntoTemplate","prepareTemplateStyles","nativeShadow","_style","querySelector","removes","fromBooleanAttribute","toBooleanAttribute","notEqual","old","defaultPropertyDeclaration","attribute","reflect","hasChanged","microtaskPromise","Promise","resolve","UpdatingElement","_HTMLElement","_updateState","_instanceProperties","_updatePromise","_changedProperties","_reflectingProperties","initialize","_wrapNativeSuper","HTMLElement","renderRoot","createRenderRoot","_saveInstanceProperties","_classProperties","_slicedToArray","_step2$value","v","styleElement","requestUpdate","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","attr","_attributeNameForProperty","propName","_attributeToPropertyMap","_propertyValueFromAttribute","oldValue","_requestPropertyUpdate","_invalidate","_valueHasChanged","updateComplete","_invalidate2","_asyncToGenerator","regeneratorRuntime","mark","_callee","resolver","previousValidatePromise","wrap","_context","prev","_hasRequestedUpdate","_validate","abrupt","stop","_applyInstanceProperties","shouldUpdate","changedProperties","update","_markUpdated","firstUpdated","updated","size","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_step3$value","k","_propertyToAttribute","_this2","superProperties","getPrototypeOf","_typeof","configurable","_finalized","superCtor","_finalize","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","createProperty","fromAttribute","Boolean","toAttribute","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_step5$value","_query","target","selector","queryFn","proto","lit_element_LitElement","_UpdatingElement","lit_element_classCallCheck","lit_element_possibleConstructorReturn","lit_element_getPrototypeOf","lit_element_inherits","lit_element_createClass","_get","templateResult","lit_html","localName","hasRendered","lib_render","cacheKey","templateCache","getTemplateElement","shady_render_shadyTemplateFactory","ShadowRoot","instance","host","isCEPolyfill","reparentNodes","removeNodes","polyfillWrapFlushCallback","before","isPrimitive","AttributeCommitter","dirty","_createPart","AttributePart","text","isArray","_getValue","comitter","committer","_part_js__WEBPACK_IMPORTED_MODULE_2__","_directive_js__WEBPACK_IMPORTED_MODULE_0__","NodePart","_pendingValue","_template_js__WEBPACK_IMPORTED_MODULE_5__","_insert","_commitText","_template_result_js__WEBPACK_IMPORTED_MODULE_4__","_commitTemplateResult","_commitNode","_commitIterable","then","_commitPromise","clear","_template_instance_js__WEBPACK_IMPORTED_MODULE_3__","_clone","itemPart","itemParts","appendIntoPart","insertAfterPart","_dom_js__WEBPACK_IMPORTED_MODULE_1__","BooleanAttributePart","PropertyCommitter","_AttributeCommitter","single","PropertyPart","_AttributePart","eventOptionsSupported","capture","removeEventListener","_e","EventPart","eventName","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","_options","getOptions","handleEvent","TemplateResult","html","isTextBinding","close","lastIndexOf","replace","match","p1","p2","p3","innerHTML","getHTML","SVGTemplateResult","_TemplateResult","svgElement","EventLinker","root","listenables","dispatched","forElements","doAction","elementNames","fn","listenable","listenableName","self","entry","toUpperCase","boundFn","observeContentChange","log","fromElement","data","dispatchable","handleInputFn","observable","observer","MutationObserver","mutations","mutation","input","observe","childList","subtree","Url","register","windowImpl","historyImpl","history","documentImpl","mkdn_nav_url_classCallCheck","loc","location","openHash","hash","origin","pathname","crumbs","title","pushState","getUrl","getCrumbs","idx","section","Crumb","getStoryByUrl","getDefault","hashSplit","newURL","elements","splice","path","updateHash","dispatch","storyDef","MkdnNav","_ChildElement","mkdn_nav_classCallCheck","delimiter","_assertThisInitialized","syncCurrentLocation","listener","onHashChange","openedWithHash","mkdn_nav_createClass","view","state","onElementContentChange","startListening","onSelection","onStoryLoaded","dispatcher","ready","evt","updateWithIndex","updateWithHash","substr","mkdn_nav_templateObject","_templateObject","renderCrumbs","_templateObject2","crumb","_templateObject3","_templateObject4","trim","updatePageLink","updateStory","templateCaches","_template_js__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"mkdn-nav.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 80);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, not attribute positions,\n * in template.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\nexport const rewritesStyleAttribute = (() => {\n  const el = document.createElement('div');\n  el.setAttribute('style', '{{bad value}}');\n  return el.getAttribute('style') !== '{{bad value}}';\n})();\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  parts: TemplatePart[] = [];\n  element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n    let index = -1;\n    let partIndex = 0;\n    const nodesToRemove: Node[] = [];\n    const _prepareTemplate = (template: HTMLTemplateElement) => {\n      const content = template.content;\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          content,\n          133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                 NodeFilter.SHOW_TEXT */\n          ,\n          null as any,\n          false);\n      // The actual previous node, accounting for removals: if a node is removed\n      // it will never be the previousNode.\n      let previousNode: Node|undefined;\n      // Used to set previousNode at the top of the loop.\n      let currentNode: Node|undefined;\n      while (walker.nextNode()) {\n        index++;\n        previousNode = currentNode;\n        const node = currentNode = walker.currentNode as Element;\n        if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n          if (node.hasAttributes()) {\n            const attributes = node.attributes;\n            // Per\n            // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n            // attributes are not guaranteed to be returned in document order.\n            // In particular, Edge/IE can return them out of order, so we cannot\n            // assume a correspondance between part index and attribute index.\n            let count = 0;\n            for (let i = 0; i < attributes.length; i++) {\n              if (attributes[i].value.indexOf(marker) >= 0) {\n                count++;\n              }\n            }\n            while (count-- > 0) {\n              // Get the template literal section leading up to the first\n              // expression in this attribute\n              const stringForPart = result.strings[partIndex];\n              // Find the attribute name\n              const name = lastAttributeNameRegex.exec(stringForPart)![2];\n              // Find the corresponding attribute\n              // If the attribute name contains special characters, lower-case\n              // it so that on XML nodes with case-sensitive getAttribute() we\n              // can still find the attribute, which will have been lower-cased\n              // by the parser.\n              //\n              // If the attribute name doesn't contain special character, it's\n              // important to _not_ lower-case it, in case the name is\n              // case-sensitive, like with XML attributes like \"viewBox\".\n              const attributeLookupName =\n                  (rewritesStyleAttribute && name === 'style') ?\n                  'style$' :\n                  /^[a-zA-Z-]*$/.test(name) ? name : name.toLowerCase();\n              const attributeValue = node.getAttribute(attributeLookupName)!;\n              const strings = attributeValue.split(markerRegex);\n              this.parts.push({type: 'attribute', index, name, strings});\n              node.removeAttribute(attributeLookupName);\n              partIndex += strings.length - 1;\n            }\n          }\n          if (node.tagName === 'TEMPLATE') {\n            _prepareTemplate(node as HTMLTemplateElement);\n          }\n        } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n          const nodeValue = node.nodeValue!;\n          if (nodeValue.indexOf(marker) < 0) {\n            continue;\n          }\n          const parent = node.parentNode!;\n          const strings = nodeValue.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // We have a part for each match found\n          partIndex += lastIndex;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            parent.insertBefore(\n                (strings[i] === '') ? createMarker() :\n                                      document.createTextNode(strings[i]),\n                node);\n            this.parts.push({type: 'node', index: index++});\n          }\n          parent.insertBefore(\n              strings[lastIndex] === '' ?\n                  createMarker() :\n                  document.createTextNode(strings[lastIndex]),\n              node);\n          nodesToRemove.push(node);\n        } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n          if (node.nodeValue === marker) {\n            const parent = node.parentNode!;\n            // Add a new marker node to be the startNode of the Part if any of\n            // the following are true:\n            //  * We don't have a previousSibling\n            //  * previousSibling is being removed (thus it's not the\n            //    `previousNode`)\n            //  * previousSibling is not a Text node\n            //\n            // TODO(justinfagnani): We should be able to use the previousNode\n            // here as the marker node and reduce the number of extra nodes we\n            // add to a template. See\n            // https://github.com/PolymerLabs/lit-html/issues/147\n            const previousSibling = node.previousSibling;\n            if (previousSibling === null || previousSibling !== previousNode ||\n                previousSibling.nodeType !== Node.TEXT_NODE) {\n              parent.insertBefore(createMarker(), node);\n            } else {\n              index--;\n            }\n            this.parts.push({type: 'node', index: index++});\n            nodesToRemove.push(node);\n            // If we don't have a nextSibling add a marker node.\n            // We don't have to check if the next node is going to be removed,\n            // because that node will induce a new marker if so.\n            if (node.nextSibling === null) {\n              parent.insertBefore(createMarker(), node);\n            } else {\n              index--;\n            }\n            currentNode = previousNode;\n            partIndex++;\n          } else {\n            let i = -1;\n            while ((i = node.nodeValue!.indexOf(marker, i + 1)) !== -1) {\n              // Comment node has a binding marker inside, make an inactive part\n              // The binding won't work, but subsequent bindings will\n              // TODO (justinfagnani): consider whether it's even worth it to\n              // make bindings in comments work\n              this.parts.push({type: 'node', index: -1});\n            }\n          }\n        }\n      }\n    };\n    _prepareTemplate(element);\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  type: 'node',\n  index: number\n}|{type: 'attribute', index: number, name: string, strings: string[]};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<any, Boolean>();\n\nexport interface Directive<P = Part> {\n  (part: P): void;\n}\n\nexport const directive = <P = Part>(f: Directive<P>): Directive<P> => {\n  directives.set(f, true);\n  return f;\n};\n\nexport const isDirective = (o: any) =>\n    typeof o === 'function' && directives.has(o);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\nimport {TemplateResult} from './template-result.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: TemplateResult,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\n// import {TemplateFactory} from './template-factory.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  _parts: Array<Part|undefined> = [];\n  processor: TemplateProcessor;\n  options: RenderOptions;\n  template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: any[]) {\n    let i = 0;\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // When using the Custom Elements polyfill, clone the node, rather than\n    // importing it, to keep the fragment in the template's document. This\n    // leaves the fragment inert so custom elements won't upgrade and\n    // potentially modify their contents by creating a polyfilled ShadowRoot\n    // while we traverse the tree.\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const parts = this.template.parts;\n    let partIndex = 0;\n    let nodeIndex = 0;\n    const _prepareInstance = (fragment: DocumentFragment) => {\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          fragment,\n          133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n          null as any,\n          false);\n      let node = walker.nextNode();\n      // Loop through all the nodes and parts of a template\n      while (partIndex < parts.length && node !== null) {\n        const part = parts[partIndex];\n        // Consecutive Parts may have the same node index, in the case of\n        // multiple bound attributes on an element. So each iteration we either\n        // increment the nodeIndex, if we aren't on a node with a part, or the\n        // partIndex if we are. By not incrementing the nodeIndex when we find a\n        // part, we allow for the next part to be associated with the current\n        // node if neccessasry.\n        if (!isTemplatePartActive(part)) {\n          this._parts.push(undefined);\n          partIndex++;\n        } else if (nodeIndex === part.index) {\n          if (part.type === 'node') {\n            const part = this.processor.handleTextExpression(this.options);\n            part.insertAfterNode(node);\n            this._parts.push(part);\n          } else {\n            this._parts.push(...this.processor.handleAttributeExpressions(\n                node as Element, part.name, part.strings, this.options));\n          }\n          partIndex++;\n        } else {\n          nodeIndex++;\n          if (node.nodeName === 'TEMPLATE') {\n            _prepareInstance((node as HTMLTemplateElement).content);\n          }\n          node = walker.nextNode();\n        }\n      }\n    };\n    _prepareInstance(fragment);\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","import {BaseElement} from './base-element';\nimport {\n  Events,\n  JOIN_EVENT,\n  JOINER_ACCEPTED,\n  JOINER_CATCHUP,\n  JOINER_LEAVING,\n  JOINER_READY,\n  PARENT_READY,\n}                    from './cooperation-events';\n\n/**\n * Class implementing the 'child' contract needed for structured\n * initialization of families of related elements.\n */\nexport class ChildElement extends BaseElement {\n  /**\n   * element name. It should be overriden by implementing class.\n   * @return {string} name\n   */\n  static get name() {\n    return 'md-child';\n  }\n\n  constructor() {\n    super();\n    this.ancestor = null;\n    this.siblings = [];\n  }\n\n  /**\n   * Called before requesting to join parent\n   */\n  beforeJoining() {}\n\n  /**\n   * Called when the element will run in alone without the support of a\n   * containing parent\n   */\n  initOrphaned() {}\n\n  /**\n   * Called when this element's request to join is accepted. Any initialization\n   * with the parent can be done then.\n   * @param {Element} parent\n   */\n  initAdopted(parent) {}\n\n  /**\n   * Called when a sibling elements have called ready(). It will only be\n   * called once per lide-cycle.\n   * @param {Element} sibling the ready element\n   */\n  onSiblingReady(sibling) {}\n\n  /**\n   * Called when a component that has joined is leaving. It will only be called once\n   * @param sibling the leaving element\n   */\n  onSiblingLeaving(sibling) {}\n\n  /**\n   * Must be called when the element is ready to collaborate. Other elements\n   * colaborating under the same parent\n   * will receive a ready event from this element only after ready() has been\n   * called.\n   */\n  ready() {\n    // if (!this.isReady) {\n      this.ancestor.dispatchEvent(Events.createReady(this));\n      // this.isReady = true;\n    // }\n  }\n\n  /**\n   * Custom Element standard call when element instance connected to DOM\n   */\n  connectedCallback() {\n    // console.debug(`${this.Class} is connected`);\n    this.findParent('md-parent');\n  }\n\n  /**\n   * Custom Element standard call when element instance disconnected from DOM\n   */\n  disconnectedCallback() {\n    this.ancestor.dispatchEvent(Events.createLeaving(this));\n  }\n\n  /**\n   * Initialize the component in standalone or cooperative mode.\n   * @param {String} ancestorSelector  a selector to find the ancestor that\n   * accepts joiners\n   * @param {Object} options  option flags. currently supports\n   * 'byId=false|true' to lookup ancestor by ID in whole\n   * document. otherwise searches closest ancestor.\n   * @return {string} 'cooperative' if attempted to register with parent;\n   * 'standalone' otherwise\n   */\n  findParent(ancestorSelector, options) {\n    const that = this;\n    // if no parent provided then standalone mode\n    if (!ancestorSelector) {\n      // console.debug(`${this.Class} initializing for standalone`);\n      this.initOrphaned();\n      return 'standalone';\n    }\n\n    // find parent\n    let ancestor;\n    if (options && options.byId) {\n      ancestor = this.ancestor = document.getElementById(ancestorSelector);\n    } else {\n      ancestor = this.ancestor = this.closest(ancestorSelector);\n    }\n\n    this.beforeJoining();\n\n    if (ancestor) {\n      this.addEventListener(JOIN_EVENT, localEventAction);\n      this.ancestor.addEventListener(JOIN_EVENT, sharedEventAction);\n      this.join();\n      return 'cooperative';\n    } else {\n      this.initOrphaned();\n      return 'standalone';\n    }\n\n    function localEventAction(event) {\n      const detail = event.detail;\n      const source = detail.source;\n      const type = detail.type;\n      switch (type) {\n        case JOINER_ACCEPTED:\n          that.initAdopted(source);\n          break;\n        case JOINER_CATCHUP:\n          if (source.hashcode() !== that.hashcode() && that.siblings.indexOf(source.hashcode()) < 0) {\n            console.debug(`${that.hashcode()} catching up with ${source.hashcode()}`);\n            that.siblings.push(source.hashcode());\n            that.onSiblingReady(source);\n          }\n          break;\n      }\n    }\n\n    function sharedEventAction(event) {\n      const detail = event.detail;\n      const source = detail.source;\n\n      if (notFromSelf()) {\n        const type = detail.type;\n        switch (type) {\n          case PARENT_READY:\n            // join because parent indicates it will accept requests\n            that.join();\n            break;\n          case JOINER_READY:\n            if (!that.siblings.includes(source.hashcode())) {\n              that.siblings.push(source.hashcode());\n              that.onSiblingReady(source);\n            }\n            break;\n          case JOINER_LEAVING:\n            if (that.siblings.indexOf(source.hashcode()) > -1) {\n              delete that.siblings[that.siblings.findIndex((i) => i === source.hashcode())];\n              that.onSiblingLeaving(source);\n            }\n            break;\n        }\n      }\n\n      function notFromSelf() {\n        return source.hashcode() ? source.hashcode() !== that.hashcode() : false;\n      }\n    }\n  }\n\n  /**\n   * dispatch a join request\n   */\n  join() {\n    if (this.ancestor) this.ancestor.dispatchEvent(Events.createRequest(this));\n  }\n\n}\n\n\n","export function clone(obj) {return JSON.parse(JSON.stringify(obj));}\n","export const JOIN_EVENT = 'md-join';\nexport const PARENT_READY = 'md-acceptor-ready';\nexport const JOINER_REQUEST = 'md-join-request';\nexport const JOINER_ACCEPTED = 'md-join-accepted';\nexport const JOINER_READY = 'md-join-ready';\nexport const JOINER_CATCHUP = 'md-join-catchup';\nexport const JOINER_LEAVING = 'md-join-leaving';\n\n/**\n * Events used for parent-child collaboration\n */\nexport class Events {\n\n\tstatic createRequest(joiner) {\n\t\tlet details = {detail:{type:JOINER_REQUEST, source:joiner}};\n\t\treturn new CustomEvent(JOIN_EVENT, details);\n\t}\n\n\tstatic createAccept(acceptor) {\n\t\tlet details = {detail:{type:JOINER_ACCEPTED, source:acceptor}};\n\t\treturn new CustomEvent(JOIN_EVENT, details);\n\t}\n\n\tstatic createReady(joiner) {\n\t\tlet details = {detail:{type:JOINER_READY, source:joiner}};\n\t\treturn new CustomEvent(JOIN_EVENT, details);\n\t}\n\n\tstatic createCatchup(joiner) {\n\t\tlet details = {detail:{type:JOINER_CATCHUP, source:joiner}};\n\t\treturn new CustomEvent(JOIN_EVENT, details);\n\t}\n\n\tstatic createAcceptorReady(joiner) {\n\t\tlet details = {detail:{type:PARENT_READY, source:joiner}};\n\t\treturn new CustomEvent(JOIN_EVENT, details);\n\t}\n\n\tstatic createLeaving(joiner) {\n\t\tlet details = {detail:{type:JOINER_LEAVING, source:joiner}};\n\t\treturn new CustomEvent(JOIN_EVENT, details);\n\t}\n}\n","import {LitElement} from '@polymer/lit-element/lit-element.js';\n\nlet id = 0;\nif (!window['mkdn']) window['mkdn'] = {dev: false};\n\nexport class BaseElement extends LitElement {\n\n  constructor() {\n    super();\n    this.Id = id++;\n    this.Class = new.target.name;\n    // console.debug(`constructing: ${this.Class}:${this.Id}`);\n    if (new.target === BaseElement) {\n      throw new TypeError('Cannot construct BaseElement instances directly');\n    }\n  }\n\n  hashcode() {\n    return this.Class + ':' + this.Id;\n  }\n\n  connectedCallback() {\n    // console.debug(`connected: ${this.Class}`);\n  }\n\n  static define(name) {\n    try {\n      const Class = this;\n      if (name) {\n        window.customElements.define(name, Class);\n      } else if (this.name) {\n        window.customElements.define(this.name, Class);\n      } else {\n        throw Error('either define [static this.name] or provide a valid name to the define(name) function');\n      }\n    } catch (e) {\n      console.debug(`swallowing custom component define() for [${name ? name : this.name}] error: ${e.message}`);\n    }\n  }\n\n  createRenderRoot() {\n    // should use a 'closed' shadow dom but must be open for testing!!! Need to figure this out\n    return this.attachShadow({mode: 'open'});\n  }\n\n}\n","/**\n * data class describing\n */\nexport class Index {\n\n  /**\n   *\n   * @param {Array} sections\n   * @param {Object} stories list of Story\n   * @param {String} defaultStory\n   */\n  constructor(sections, stories, defaultStory) {\n    this.sections = sections;\n    this.stories = stories;\n    this.defaultStory = defaultStory;\n  }\n\n  getDefault() {\n    const keys = Object.keys(this.stories);\n    const stories = this.stories;\n    const filter = keys.filter((key) => {\n      return stories[key].url === this.defaultStory;\n    });\n    return stories[filter[0]];\n  }\n\n  getStoryByUrl(url) {\n    const keys = Object.keys(this.stories);\n    return keys.filter((story) => story.url === url)[0];\n  }\n\n}\n","/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  value: any;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: any): void;\n\n  /**\n   * Commits the current part value, cause it to actually be written to the DOM.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {createMarker, directive, Directive, NodePart, removeNodes, reparentNodes} from '../lit-html.js';\n\nexport type KeyFn<T> = (item: T, index?: number) => any;\nexport type ItemTemplate<T> = (item: T, index?: number) => any;\n\n// Helper functions for manipulating parts\n// TODO(kschaaf): Refactor into Part API?\nconst createAndInsertPart =\n    (containerPart: NodePart, beforePart?: NodePart): NodePart => {\n      const container = containerPart.startNode.parentNode as Node;\n      const beforeNode = beforePart === undefined ? containerPart.endNode :\n                                                    beforePart.startNode;\n      const startNode = container.insertBefore(createMarker(), beforeNode);\n      container.insertBefore(createMarker(), beforeNode);\n      const newPart = new NodePart(containerPart.options);\n      newPart.insertAfterNode(startNode);\n      return newPart;\n    };\n\nconst updatePart = (part: NodePart, value: unknown) => {\n  part.setValue(value);\n  part.commit();\n  return part;\n};\n\nconst insertPartBefore =\n    (containerPart: NodePart, part: NodePart, ref?: NodePart) => {\n      const container = containerPart.startNode.parentNode as Node;\n      const beforeNode = ref ? ref.startNode : containerPart.endNode;\n      const endNode = part.endNode.nextSibling;\n      if (endNode !== beforeNode) {\n        reparentNodes(container, part.startNode, endNode, beforeNode);\n      }\n    };\n\nconst removePart = (part: NodePart) => {\n  removeNodes(\n      part.startNode.parentNode!, part.startNode, part.endNode.nextSibling);\n};\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\n// Stores previous ordered list of parts and map of key to index\nconst partListCache = new WeakMap<NodePart, (NodePart | null)[]>();\nconst keyListCache = new WeakMap<NodePart, unknown[]>();\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * amd removals.\n *\n * IMPORTANT: if providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when providing duplicate keys is\n * undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport function repeat<T>(\n    items: Iterable<T>, keyFn: KeyFn<T>, template: ItemTemplate<T>):\n    Directive<NodePart>;\nexport function repeat<T>(\n    items: Iterable<T>, template: ItemTemplate<T>): Directive<NodePart>;\nexport function repeat<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T>|ItemTemplate<T>,\n    template?: ItemTemplate<T>): Directive<NodePart> {\n  let keyFn: KeyFn<T>;\n  if (arguments.length === 2) {\n    template = keyFnOrTemplate;\n  } else if (arguments.length === 3) {\n    keyFn = keyFnOrTemplate as KeyFn<T>;\n  }\n\n  return directive((containerPart: NodePart): void => {\n    // Old part & key lists are retrieved from the last update (associated with\n    // the part for this instance of the directive)\n    const oldParts = partListCache.get(containerPart) || [];\n    const oldKeys = keyListCache.get(containerPart) || [];\n\n    // New part list will be built up as we go (either reused from old parts or\n    // created for new keys in this update). This is saved in the above cache\n    // at the end of the update.\n    const newParts: NodePart[] = [];\n\n    // New value list is eagerly generated from items along with a parallel\n    // array indicating its key.\n    const newValues: unknown[] = [];\n    const newKeys: unknown[] = [];\n    let index = 0;\n    for (const item of items) {\n      newKeys[index] = keyFn ? keyFn(item, index) : index;\n      newValues[index] = template !(item, index);\n      index++;\n    }\n\n    // Maps from key to index for current and previous update; these are\n    // generated lazily only when needed as a performance optimization, since\n    // they are only required for multiple non-contiguous changes in the list,\n    // which are less common.\n    let newKeyToIndexMap!: Map<unknown, number>;\n    let oldKeyToIndexMap!: Map<unknown, number>;\n\n    // Head and tail pointers to old parts and new values\n    let oldHead = 0;\n    let oldTail = oldParts.length - 1;\n    let newHead = 0;\n    let newTail = newValues.length - 1;\n\n    // Overview of O(n) reconciliation algorithm (general approach based on\n    // ideas found in ivi, vue, snabbdom, etc.):\n    //\n    // * We start with the list of old parts and new values (and arrays of\n    //   their respective keys), head/tail pointers into each, and we build\n    //   up the new list of parts by updating (and when needed, moving) old\n    //   parts or creating new ones. The initial scenario might look like this\n    //   (for brevity of the diagrams, the numbers in the array reflect keys\n    //   associated with the old parts or new values, although keys and\n    //   parts/values are actually stored in parallel arrays indexed using the\n    //   same head/tail pointers):\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new item order\n    //      newHead ^                 ^ newTail\n    //\n    // * Iterate old & new lists from both sides, updating, swapping, or\n    //   removing parts at the head/tail locations until neither head nor tail\n    //   can move.\n    //\n    // * Example below: keys at head pointers match, so update old part 0 in-\n    //   place (no need to move it) and record part 0 in the `newParts` list.\n    //   The last thing we do is advance the `oldHead` and `newHead` pointers\n    //   (will be reflected in the next diagram).\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0 and\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    advance both oldHead & newHead\n    //      newHead ^                 ^ newTail\n    //\n    // * Example below: head pointers don't match, but tail pointers do, so\n    //   update part 6 in place (no need to move it), and record part 6 in the\n    //   `newParts` list. Last, advance the `oldTail` and `oldHead` pointers.\n    //\n    //         oldHead v              v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6 and\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    advance both oldTail & newTail\n    //         newHead ^              ^ newTail\n    //\n    // * If neither head nor tail match; next check if one of the old head/tail\n    //   items was removed. We first need to generate the reverse map of new\n    //   keys to index (`newKeyToIndexMap`), which is done once lazily as a\n    //   performance optimization, since we only hit this case if multiple\n    //   non-contiguous changes were made. Note that for contiguous removal\n    //   anywhere in the list, the head and tails would advance from either end\n    //   and pass each other before we get to this case and removals would be\n    //   handled in the final while loop without needing to generate the map.\n    //\n    // * Example below: The key at `oldTail` was removed (no longer in the\n    //   `newKeyToIndexMap`), so remove that part from the DOM and advance just\n    //   the `oldTail` pointer.\n    //\n    //         oldHead v           v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map; remove 5 and\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    advance oldTail\n    //         newHead ^           ^ newTail\n    //\n    // * Once head and tail cannot move, any mismatches are due to either new or\n    //   moved items; if a new key is in the previous \"old key to old index\"\n    //   map, move the old part to the new location, otherwise create and insert\n    //   a new part. Note that when moving an old part we null its position in\n    //   the oldParts array if it lies between the head and tail so we know to\n    //   skip it when the pointers get there.\n    //\n    // * Example below: neither head nor tail match, and neither were removed;\n    //   so find the `newHead` key in the `oldKeyToIndexMap`, and move that old\n    //   part's DOM into the next head position (before `oldParts[oldHead]`).\n    //   Last, null the part in the `oldPart` array since it was somewhere in\n    //   the remaining oldParts still to be scanned (between the head and tail\n    //   pointers) so that we know to skip that old part on future iterations.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck; update & move 2 into place\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance newHead\n    //         newHead ^           ^ newTail\n    //\n    // * Note that for moves/insertions like the one above, a part inserted at\n    //   the head pointer is inserted before the current `oldParts[oldHead]`,\n    //   and a part inserted at the tail pointer is inserted before\n    //   `newParts[newTail+1]`. The seeming asymmetry lies in the fact that new\n    //   parts are moved into place outside in, so to the right of the head\n    //   pointer are old parts, and to the right of the tail pointer are new\n    //   parts.\n    //\n    // * We always restart back from the top of the algorithm, allowing matching\n    //   and simple updates in place to continue...\n    //\n    // * Example below: the head pointers once again match, so simply update\n    //   part 1 and record it in the `newParts` array.  Last, advance both head\n    //   pointers.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched; update 1 and\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    advance both oldHead & newHead\n    //            newHead ^        ^ newTail\n    //\n    // * As mentioned above, items that were moved as a result of being stuck\n    //   (the final else clause in the code below) are marked with null, so we\n    //   always advance old pointers over these so we're comparing the next\n    //   actual old value on either end.\n    //\n    // * Example below: `oldHead` is null (already placed in newParts), so\n    //   advance `oldHead`.\n    //\n    //            oldHead v     v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6] // old head already used; advance\n    //   newParts: [0, 2, 1,  ,  ,  , 6] // oldHead\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //               newHead ^     ^ newTail\n    //\n    // * Note it's not critical to mark old parts as null when they are moved\n    //   from head to tail or tail to head, since they will be outside the\n    //   pointer range and never visited again.\n    //\n    // * Example below: Here the old tail key matches the new head key, so\n    //   the part at the `oldTail` position and move its DOM to the new\n    //   head position (before `oldParts[oldHead]`). Last, advance `oldTail`\n    //   and `newHead` pointers.\n    //\n    //               oldHead v  v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new head: update\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   & move 4, advance oldTail & newHead\n    //               newHead ^     ^ newTail\n    //\n    // * Example below: Old and new head keys match, so update the old head\n    //   part in place, and advance the `oldHead` and `newHead` pointers.\n    //\n    //               oldHead v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3 and advance\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    oldHead & newHead\n    //                  newHead ^  ^ newTail\n    //\n    // * Once the new or old pointers move past each other then all we have\n    //   left is additions (if old list exhausted) or removals (if new list\n    //   exhausted). Those are handled in the final while loops at the end.\n    //\n    // * Example below: `oldHead` exceeded `oldTail`, so we're done with the\n    //   main loop.  Create the remaining part and insert it at the new head\n    //   position, and the update is complete.\n    //\n    //                   (oldHead > oldTail)\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //                     newHead ^ newTail\n    //\n    // * Note that the order of the if/else clauses is not important to the\n    //   algorithm, as long as the null checks come first (to ensure we're\n    //   always working on valid old parts) and that the final else clause\n    //   comes last (since that's where the expensive moves occur). The\n    //   order of remaining clauses is is just a simple guess at which cases\n    //   will be most common.\n    //\n    // * TODO(kschaaf) Note, we could calculate the longest increasing\n    //   subsequence (LIS) of old items in new position, and only move those not\n    //   in the LIS set. However that costs O(nlogn) time and adds a bit more\n    //   code, and only helps make rare types of mutations require fewer moves.\n    //   The above handles removes, adds, reversal, swaps, and single moves of\n    //   contiguous items in linear time, in the minimum number of moves. As\n    //   the number of multiple moves where LIS might help approaches a random\n    //   shuffle, the LIS optimization becomes less helpful, so it seems not\n    //   worth the code at this point. Could reconsider if a compelling case\n    //   arises.\n\n    while (oldHead <= oldTail && newHead <= newTail) {\n      if (oldParts[oldHead] === null) {\n        // `null` means old part at head has already been used below; skip\n        oldHead++;\n      } else if (oldParts[oldTail] === null) {\n        // `null` means old part at tail has already been used below; skip\n        oldTail--;\n      } else if (oldKeys[oldHead] === newKeys[newHead]) {\n        // Old head matches new head; update in place\n        newParts[newHead] = updatePart(oldParts[oldHead]!, newValues[newHead]);\n        oldHead++;\n        newHead++;\n      } else if (oldKeys[oldTail] === newKeys[newTail]) {\n        // Old tail matches new tail; update in place\n        newParts[newTail] = updatePart(oldParts[oldTail]!, newValues[newTail]);\n        oldTail--;\n        newTail--;\n      } else if (oldKeys[oldHead] === newKeys[newTail]) {\n        // Old head matches new tail; update and move to new tail\n        newParts[newTail] = updatePart(oldParts[oldHead]!, newValues[newTail]);\n        insertPartBefore(\n            containerPart, oldParts[oldHead]!, newParts[newTail + 1]);\n        oldHead++;\n        newTail--;\n      } else if (oldKeys[oldTail] === newKeys[newHead]) {\n        // Old tail matches new head; update and move to new head\n        newParts[newHead] = updatePart(oldParts[oldTail]!, newValues[newHead]);\n        insertPartBefore(containerPart, oldParts[oldTail]!, oldParts[oldHead]!);\n        oldTail--;\n        newHead++;\n      } else {\n        if (newKeyToIndexMap === undefined) {\n          // Lazily generate key-to-index maps, used for removals & moves below\n          newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n          oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n        }\n        if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n          // Old head is no longer in new list; remove\n          removePart(oldParts[oldHead]!);\n          oldHead++;\n        } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n          // Old tail is no longer in new list; remove\n          removePart(oldParts[oldTail]!);\n          oldTail--;\n        } else {\n          // Any mismatches at this point are due to additions or moves; see if\n          // we have an old part we can reuse and move into place\n          const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n          const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n          if (oldPart === null) {\n            // No old part for this value; create a new one and insert it\n            const newPart =\n                createAndInsertPart(containerPart, oldParts[oldHead]!);\n            updatePart(newPart, newValues[newHead]);\n            newParts[newHead] = newPart;\n          } else {\n            // Reuse old part\n            newParts[newHead] = updatePart(oldPart, newValues[newHead]);\n            insertPartBefore(containerPart, oldPart, oldParts[oldHead]!);\n            // This marks the old part as having been used, so that it will be\n            // skipped in the first two checks above\n            oldParts[oldIndex as number] = null;\n          }\n          newHead++;\n        }\n      }\n    }\n    // Add parts for any remaining new values\n    while (newHead <= newTail) {\n      // For all remaining additions, we insert before last new tail,\n      // since old pointers are no longer valid\n      const newPart =\n          createAndInsertPart(containerPart, newParts[newTail + 1]!);\n      updatePart(newPart, newValues[newHead]);\n      newParts[newHead++] = newPart;\n    }\n    // Remove any remaining unused old parts\n    while (oldHead <= oldTail) {\n      const oldPart = oldParts[oldHead++];\n      if (oldPart !== null) {\n        removePart(oldPart);\n      }\n    }\n    // Save order of new parts for next round\n    partListCache.set(containerPart, newParts);\n    keyListCache.set(containerPart, newKeys);\n  });\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): Part[] {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const comitter = new PropertyCommitter(element, name.slice(1), strings);\n      return comitter.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const comitter = new AttributeCommitter(element, name, strings);\n    return comitter.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport * from './lib/template-result.js';\nexport * from './lib/template.js';\nexport * from './lib/template-processor.js';\nexport * from './lib/default-template-processor.js';\nexport * from './lib/template-instance.js';\nexport * from './lib/part.js';\nexport * from './lib/parts.js';\nexport * from './lib/dom.js';\nexport * from './lib/directive.js';\nexport * from './lib/render.js';\nexport * from './lib/template-factory.js';\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: any[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: any[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\nconst walkerNodeFilter =\n    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT;\n\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(\n    template: Template, nodesToRemove: Set<Node>) {\n  const {element: {content}, parts} = template;\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null as any, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let part = parts[partIndex];\n  let nodeIndex = -1;\n  let removeCount = 0;\n  const nodesToRemoveInTemplate = [];\n  let currentRemovingNode: Node|null = null;\n  while (walker.nextNode()) {\n    nodeIndex++;\n    const node = walker.currentNode as Element;\n    // End removal if stepped past the removing node\n    if (node.previousSibling === currentRemovingNode) {\n      currentRemovingNode = null;\n    }\n    // A node to remove was found in the template\n    if (nodesToRemove.has(node)) {\n      nodesToRemoveInTemplate.push(node);\n      // Track node we're removing\n      if (currentRemovingNode === null) {\n        currentRemovingNode = node;\n      }\n    }\n    // When removing, increment count by which to adjust subsequent part indices\n    if (currentRemovingNode !== null) {\n      removeCount++;\n    }\n    while (part !== undefined && part.index === nodeIndex) {\n      // If part is in a removed node deactivate it by setting index to -1 or\n      // adjust the index as needed.\n      part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n      // go to the next active part.\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n      part = parts[partIndex];\n    }\n  }\n  nodesToRemoveInTemplate.forEach((n) => n.parentNode!.removeChild(n));\n}\n\nconst countNodes = (node: Node) => {\n  let count = (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) ? 0 : 1;\n  const walker =\n      document.createTreeWalker(node, walkerNodeFilter, null as any, false);\n  while (walker.nextNode()) {\n    count++;\n  }\n  return count;\n};\n\nconst nextActiveIndexInTemplateParts =\n    (parts: TemplatePart[], startIndex: number = -1) => {\n      for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(\n    template: Template, node: Node, refNode: Node|null = null) {\n  const {element: {content}, parts} = template;\n  // If there's no refNode, then put node at end of template.\n  // No part indices need to be shifted in this case.\n  if (refNode === null || refNode === undefined) {\n    content.appendChild(node);\n    return;\n  }\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null as any, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let insertCount = 0;\n  let walkerIndex = -1;\n  while (walker.nextNode()) {\n    walkerIndex++;\n    const walkerNode = walker.currentNode as Element;\n    if (walkerNode === refNode) {\n      insertCount = countNodes(node);\n      refNode.parentNode!.insertBefore(node, refNode);\n    }\n    while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n      // If we've inserted the node, simply adjust all subsequent parts\n      if (insertCount > 0) {\n        while (partIndex !== -1) {\n          parts[partIndex].index += insertCount;\n          partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n        return;\n      }\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {insertNodeIntoTemplate, removeNodesFromTemplate} from './modify-template.js';\nimport {RenderOptions} from './render-options.js';\nimport {parts, render as litRender} from './render.js';\nimport {templateCaches} from './template-factory.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {Template} from './template.js';\n\nexport {html, svg, TemplateResult} from '../lit-html.js';\n\ndeclare global {\n  interface Window {\n    ShadyCSS: any;\n  }\n  class ShadowRoot {}\n}\n\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type: string, scopeName: string) =>\n    `${type}--${scopeName}`;\n\nlet compatibleShadyCSSVersion = true;\n\nif (typeof window.ShadyCSS === 'undefined') {\n  compatibleShadyCSSVersion = false;\n} else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n  console.warn(\n      `Incompatible ShadyCSS version detected.` +\n      `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n      `@webcomponents/shadycss@1.3.1.`);\n  compatibleShadyCSSVersion = false;\n}\n\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName: string) =>\n    (result: TemplateResult) => {\n      const cacheKey = getTemplateCacheKey(result.type, scopeName);\n      let templateCache = templateCaches.get(cacheKey);\n      if (templateCache === undefined) {\n        templateCache = new Map<TemplateStringsArray, Template>();\n        templateCaches.set(cacheKey, templateCache);\n      }\n      let template = templateCache.get(result.strings);\n      if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n          window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.set(result.strings, template);\n      }\n      return template;\n    };\n\n\nconst TEMPLATE_TYPES = ['html', 'svg'];\n\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName: string) => {\n  TEMPLATE_TYPES.forEach((type) => {\n    const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n    if (templates !== undefined) {\n      templates.forEach((template) => {\n        const {element: {content}} = template;\n        // IE 11 doesn't support the iterable param Set constructor\n        const styles = new Set<Element>();\n        Array.from(content.querySelectorAll('style')).forEach((s: Element) => {\n          styles.add(s);\n        });\n        removeNodesFromTemplate(template, styles);\n      });\n    }\n  });\n};\n\nconst shadyRenderSet = new Set<string>();\n\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles =\n    (renderedDOM: DocumentFragment, template: Template, scopeName: string) => {\n      shadyRenderSet.add(scopeName);\n      // Move styles out of rendered DOM and store.\n      const styles = renderedDOM.querySelectorAll('style');\n      // If there are no styles, there's no work to do.\n      if (styles.length === 0) {\n        return;\n      }\n      const condensedStyle = document.createElement('style');\n      // Collect styles into a single style. This helps us make sure ShadyCSS\n      // manipulations will not prevent us from being able to fix up template\n      // part indices.\n      // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n      // currently does this anyway. When it does not, this should be changed.\n      for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode!.removeChild(style);\n        condensedStyle.textContent! += style.textContent;\n      }\n      // Remove styles from nested templates in this scope.\n      removeStylesFromLitTemplates(scopeName);\n      // And then put the condensed style into the \"root\" template passed in as\n      // `template`.\n      insertNodeIntoTemplate(\n          template, condensedStyle, template.element.content.firstChild);\n      // Note, it's important that ShadyCSS gets the template that `lit-html`\n      // will actually render so that it can update the style inside when\n      // needed (e.g. @apply native Shadow DOM case).\n      window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n      if (window.ShadyCSS.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style')!;\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n      } else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(\n            condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n      }\n    };\n\nexport interface ShadyRenderOptions extends Partial<RenderOptions> {\n  scopeName: string;\n}\n\nexport const render =\n    (result: TemplateResult,\n     container: Element|DocumentFragment,\n     options: ShadyRenderOptions) => {\n      const scopeName = options.scopeName;\n      const hasRendered = parts.has(container);\n      litRender(result, container, {\n        templateFactory: shadyTemplateFactory(scopeName),\n        ...options,\n      } as RenderOptions);\n      // When rendering a TemplateResult, scope the template with ShadyCSS\n      if (container instanceof ShadowRoot && compatibleShadyCSSVersion &&\n          result instanceof TemplateResult) {\n        // Scope the element template one time only for this scope.\n        if (!shadyRenderSet.has(scopeName)) {\n          const part = parts.get(container)!;\n          const instance = part.value as TemplateInstance;\n          prepareTemplateStyles(\n              (container as ShadowRoot), instance.template, scopeName);\n        }\n        // Update styling if this is the initial render to this container.\n        if (!hasRendered) {\n          window.ShadyCSS.styleElement((container as ShadowRoot).host);\n        }\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface AttributeSerializer<T = any> {\n\n  /**\n   * Deserializing function called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string): T;\n\n  /**\n   * Serializing function called to convert a property value to an attribute\n   * value.\n   */\n  toAttribute?(value: T): string|null;\n}\n\ntype AttributeType<T = any> = AttributeSerializer<T>|((value: string) => T);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<T = any> {\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  attribute?: boolean|string;\n\n  /**\n   * Indicates how to serialize and deserialize the attribute to/from a\n   * property. If this value is a function, it is used to deserialize the\n   * attribute value a the property value. If it's an object, it can have keys\n   * for `fromAttribute` and `toAttribute` where `fromAttribute` is the\n   * deserialize function and `toAttribute` is a serialize function used to set\n   * the property to an attribute. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute.\n   */\n  type?: AttributeType<T>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property serialized using the rules\n   * from the `type` property option.\n   */\n  reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: T, oldValue: T): boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\nexport type PropertyValues = Map<PropertyKey, unknown>;\n\n// serializer/deserializers for boolean attribute\nconst fromBooleanAttribute = (value: string) => value !== null;\nconst toBooleanAttribute = (value: string) => value ? '' : null;\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute : true,\n  type : String,\n  reflect : false,\n  hasChanged : notEqual\n};\n\nconst microtaskPromise = new Promise((resolve) => resolve(true));\n\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING = 1 << 3;\ntype UpdateState = typeof STATE_HAS_UPDATED|typeof STATE_UPDATE_REQUESTED|\n    typeof STATE_IS_REFLECTING;\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport abstract class UpdatingElement extends HTMLElement {\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute\n   * to `fooBar` property.\n   */\n  private static _attributeToPropertyMap: AttributeMap = new Map();\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  private static _finalized = true;\n\n  /**\n   * Memoized list of all class properties, including any superclass properties.\n   */\n  private static _classProperties: PropertyDeclarationMap = new Map();\n\n  static properties: PropertyDeclarations = {};\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're _finalized.\n    this._finalize();\n    const attributes = [];\n    for (const [p, v] of this._classProperties) {\n      const attr = this._attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this._attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    }\n    return attributes;\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   */\n  static createProperty(name: PropertyKey,\n                        options:\n                            PropertyDeclaration = defaultPropertyDeclaration) {\n    // ensure private storage for property declarations.\n    if (!this.hasOwnProperty('_classProperties')) {\n      this._classProperties = new Map();\n      // NOTE: Workaround IE11 not supporting Map constructor argument.\n      const superProperties = Object.getPrototypeOf(this)._classProperties;\n      if (superProperties !== undefined) {\n        superProperties.forEach((v: any, k: PropertyKey) =>\n                                    this._classProperties.set(k, v));\n      }\n    }\n    this._classProperties.set(name, options);\n    // Allow user defined accessors by not replacing an existing own-property\n    // accessor.\n    if (this.prototype.hasOwnProperty(name)) {\n      return;\n    }\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n    Object.defineProperty(this.prototype, name, {\n      get() { return this[key]; },\n      set(value) {\n        const oldValue = this[name];\n        this[key] = value;\n        this._requestPropertyUpdate(name, oldValue, options);\n      },\n      configurable : true,\n      enumerable : true\n    });\n  }\n\n  /**\n   * Creates property accessors for registered properties and ensures\n   * any superclasses are also finalized.\n   */\n  private static _finalize() {\n    if (this.hasOwnProperty('_finalized') && this._finalized) {\n      return;\n    }\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n    if (typeof superCtor._finalize === 'function') {\n      superCtor._finalize();\n    }\n    this._finalized = true;\n    // initialize Map populated in observedAttributes\n    this._attributeToPropertyMap = new Map();\n    // make any properties\n    const props = this.properties;\n    // support symbols in properties (IE11 does not support this)\n    const propKeys = [\n      ...Object.getOwnPropertyNames(props),\n      ...(typeof Object.getOwnPropertySymbols === 'function')\n          ? Object.getOwnPropertySymbols(props)\n          : []\n    ];\n    for (const p of propKeys) {\n      // note, use of `any` is due to TypeSript lack of support for symbol in\n      // index types\n      this.createProperty(p, (props as any)[p]);\n    }\n  }\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   */\n  private static _attributeNameForProperty(name: PropertyKey,\n                                           options?: PropertyDeclaration) {\n    const attribute = options !== undefined && options.attribute;\n    return attribute === false\n               ? undefined\n               : (typeof attribute === 'string'\n                      ? attribute\n                      : (typeof name === 'string' ? name.toLowerCase()\n                                                  : undefined));\n  }\n\n  /**\n   * Returns true if a property should request an update.\n   * Called when a property value is set and uses the `hasChanged`\n   * option for the property if present or a strict identity check.\n   */\n  private static _valueHasChanged(value: unknown, old: unknown,\n                                  hasChanged: HasChanged = notEqual) {\n    return hasChanged(value, old);\n  }\n\n  /**\n   * Returns the property value for the given attribute value.\n   * Called via the `attributeChangedCallback` and uses the property's `type`\n   * or `type.fromAttribute` property option.\n   */\n  private static _propertyValueFromAttribute(value: string,\n                                             options?: PropertyDeclaration) {\n    const type = options && options.type;\n    if (type === undefined) {\n      return value;\n    }\n    // Note: special case `Boolean` so users can use it as a `type`.\n    const fromAttribute =\n        type === Boolean\n            ? fromBooleanAttribute\n            : (typeof type === 'function' ? type : type.fromAttribute);\n    return fromAttribute ? fromAttribute(value) : value;\n  }\n\n  /**\n   * Returns the attribute value for the given property value. If this\n   * returns undefined, the property will *not* be reflected to an attribute.\n   * If this returns null, the attribute will be removed, otherwise the\n   * attribute will be set to the value.\n   * This uses the property's `reflect` and `type.toAttribute` property options.\n   */\n  private static _propertyValueToAttribute(value: unknown,\n                                           options?: PropertyDeclaration) {\n    if (options === undefined || options.reflect === undefined) {\n      return;\n    }\n    // Note: special case `Boolean` so users can use it as a `type`.\n    const toAttribute =\n        options.type === Boolean\n            ? toBooleanAttribute\n            : (options.type &&\n                   (options.type as AttributeSerializer).toAttribute ||\n               String);\n    return toAttribute(value);\n  }\n\n  private _updateState: UpdateState = 0;\n  private _instanceProperties: PropertyValues|undefined = undefined;\n  private _updatePromise: Promise<unknown> = microtaskPromise;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   */\n  private _changedProperties: PropertyValues = new Map();\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private _reflectingProperties: Map<PropertyKey, PropertyDeclaration>|\n      undefined = undefined;\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   */\n  protected renderRoot?: Element|DocumentFragment;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Performs element initialization. By default this calls `createRenderRoot`\n   * to create the element `renderRoot` node and captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    this.renderRoot = this.createRenderRoot();\n    this._saveInstanceProperties();\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private _saveInstanceProperties() {\n    for (const [p] of (this.constructor as typeof UpdatingElement)\n             ._classProperties) {\n      if (this.hasOwnProperty(p)) {\n        const value = this[p as keyof this];\n        delete this[p as keyof this];\n        if (!this._instanceProperties) {\n          this._instanceProperties = new Map();\n        }\n        this._instanceProperties.set(p, value);\n      }\n    }\n  }\n\n  /**\n   * Applies previously saved instance properties.\n   */\n  private _applyInstanceProperties() {\n    for (const [p, v] of this._instanceProperties!) {\n      (this as any)[p] = v;\n    }\n    this._instanceProperties = undefined;\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected createRenderRoot(): Element|ShadowRoot {\n    return this.attachShadow({mode : 'open'});\n  }\n\n  /**\n   * Uses ShadyCSS to keep element DOM updated.\n   */\n  connectedCallback() {\n    if ((this._updateState & STATE_HAS_UPDATED)) {\n      if (window.ShadyCSS !== undefined) {\n        window.ShadyCSS.styleElement(this);\n      }\n    } else {\n      this.requestUpdate();\n    }\n  }\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   */\n  disconnectedCallback() {}\n\n  /**\n   * Synchronizes property values when attributes change.\n   */\n  attributeChangedCallback(name: string, old: string, value: string) {\n    if (old !== value) {\n      this._attributeToProperty(name, value);\n    }\n  }\n\n  private _propertyToAttribute(\n      name: PropertyKey, value: unknown,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const attrValue = ctor._propertyValueToAttribute(value, options);\n    if (attrValue !== undefined) {\n      const attr = ctor._attributeNameForProperty(name, options);\n      if (attr !== undefined) {\n        // Track if the property is being reflected to avoid\n        // setting the property again via `attributeChangedCallback`. Note:\n        // 1. this takes advantage of the fact that the callback is synchronous.\n        // 2. will behave incorrectly if multiple attributes are in the reaction\n        // stack at time of calling. However, since we process attributes\n        // in `update` this should not be possible (or an extreme corner case\n        // that we'd like to discover).\n        // mark state reflecting\n        this._updateState = this._updateState | STATE_IS_REFLECTING;\n        if (attrValue === null) {\n          this.removeAttribute(attr);\n        } else {\n          this.setAttribute(attr, attrValue);\n        }\n        // mark state not reflecting\n        this._updateState = this._updateState & ~STATE_IS_REFLECTING;\n      }\n    }\n  }\n\n  private _attributeToProperty(name: string, value: string) {\n    // Use tracking info to avoid deserializing attribute value if it was\n    // just set from a property setter.\n    if (!(this._updateState & STATE_IS_REFLECTING)) {\n      const ctor = (this.constructor as typeof UpdatingElement);\n      const propName = ctor._attributeToPropertyMap.get(name);\n      if (propName !== undefined) {\n        const options = ctor._classProperties.get(propName);\n        this[propName as keyof this] =\n            ctor._propertyValueFromAttribute(value, options);\n      }\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should\n   * be called when an element should update based on some state not triggered\n   * by setting a property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored. Returns the `updateComplete` Promise which is resolved\n   * when the update completes.\n   *\n   * @param name {PropertyKey} (optional) name of requesting property\n   * @param oldValue {any} (optional) old value of requesting property\n   * @returns {Promise} A Promise that is resolved when the update completes.\n   */\n  requestUpdate(name?: PropertyKey, oldValue?: any) {\n    if (name !== undefined) {\n      const options = (this.constructor as typeof UpdatingElement)\n                          ._classProperties.get(name) ||\n                      defaultPropertyDeclaration;\n      return this._requestPropertyUpdate(name, oldValue, options);\n    }\n    return this._invalidate();\n  }\n\n  /**\n   * Requests an update for a specific property and records change information.\n   * @param name {PropertyKey} name of requesting property\n   * @param oldValue {any} old value of requesting property\n   * @param options {PropertyDeclaration}\n   */\n  private _requestPropertyUpdate(name: PropertyKey, oldValue: any,\n                                 options: PropertyDeclaration) {\n    if (!(this.constructor as typeof UpdatingElement)\n             ._valueHasChanged(this[name as keyof this], oldValue,\n                               options.hasChanged)) {\n      return this.updateComplete;\n    }\n    // track old value when changing.\n    if (!this._changedProperties.has(name)) {\n      this._changedProperties.set(name, oldValue);\n    }\n    // add to reflecting properties set\n    if (options.reflect === true) {\n      if (this._reflectingProperties === undefined) {\n        this._reflectingProperties = new Map();\n      }\n      this._reflectingProperties.set(name, options);\n    }\n    return this._invalidate();\n  }\n\n  /**\n   * Invalidates the element causing it to asynchronously update regardless\n   * of whether or not any property changes are pending. This method is\n   * automatically called when any registered property changes.\n   */\n  private async _invalidate() {\n    if (!this._hasRequestedUpdate) {\n      // mark state updating...\n      this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n      let resolver: any;\n      const previousValidatePromise = this._updatePromise;\n      this._updatePromise = new Promise((r) => resolver = r);\n      await previousValidatePromise;\n      this._validate();\n      resolver!(!this._hasRequestedUpdate);\n    }\n    return this.updateComplete;\n  }\n\n  private get _hasRequestedUpdate() {\n    return (this._updateState & STATE_UPDATE_REQUESTED);\n  }\n\n  /**\n   * Validates the element by updating it.\n   */\n  private _validate() {\n    // Mixin instance properties once, if they exist.\n    if (this._instanceProperties) {\n      this._applyInstanceProperties();\n    }\n    if (this.shouldUpdate(this._changedProperties)) {\n      const changedProperties = this._changedProperties;\n      this.update(changedProperties);\n      this._markUpdated();\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\n        this.firstUpdated(changedProperties);\n      }\n      this.updated(changedProperties);\n    } else {\n      this._markUpdated();\n    }\n  }\n  private _markUpdated() {\n    this._changedProperties = new Map();\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. This getter can be implemented to\n   * await additional state. For example, it is sometimes useful to await a\n   * rendered element before fulfilling this Promise. To do this, first await\n   * `super.updateComplete` then any subsequent state.\n   *\n   * @returns {Promise} The Promise returns a boolean that indicates if the\n   * update resolved without triggering another update.\n   */\n  get updateComplete() { return this._updatePromise; }\n\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated DOM in the element's\n   * `renderRoot`. Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this._reflectingProperties !== undefined &&\n        this._reflectingProperties.size > 0) {\n      for (const [k, v] of this._reflectingProperties) {\n        this._propertyToAttribute(k, this[k as keyof this], v);\n      }\n      this._reflectingProperties = undefined;\n    }\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n","\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {LitElement} from '../lit-element.js';\n\nimport {PropertyDeclaration, UpdatingElement} from './updating-element.js';\n\nexport type Constructor<T> = {\n  new (...args: any[]): T\n};\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n *\n * In TypeScript, the `tagName` passed to `customElement` must be a key of the\n * `HTMLElementTagNameMap` interface. To add your element to the interface,\n * declare the interface in this module:\n *\n *     @customElement('my-element')\n *     export class MyElement extends LitElement {}\n *\n *     declare global {\n *       interface HTMLElementTagNameMap {\n *         'my-element': MyElement;\n *       }\n *     }\n *\n */\nexport const customElement = (tagName: keyof HTMLElementTagNameMap) =>\n    (clazz: Constructor<HTMLElement>) => {\n      window.customElements.define(tagName, clazz);\n      // Cast as any because TS doesn't recognize the return type as being a\n      // subtype of the decorated class when clazz is typed as\n      // `Constructor<HTMLElement>` for some reason. `Constructor<HTMLElement>`\n      // is helpful to make sure the decorator is applied to elements however.\n      return clazz as any;\n    };\n\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n */\nexport const property = (options?: PropertyDeclaration) => (proto: Object,\n                                                            name: string) => {\n  (proto.constructor as typeof UpdatingElement).createProperty(name, options);\n};\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n */\nexport const query = _query((target: NodeSelector, selector: string) =>\n                                target.querySelector(selector));\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n */\nexport const queryAll = _query((target: NodeSelector, selector: string) =>\n                                   target.querySelectorAll(selector));\n\n/**\n * Base-implementation of `@query` and `@queryAll` decorators.\n *\n * @param queryFn exectute a `selector` (ie, querySelector or querySelectorAll)\n * against `target`.\n */\nfunction _query<T>(queryFn: (target: NodeSelector, selector: string) => T) {\n  return (selector: string) => (proto: any, propName: string) => {\n    Object.defineProperty(proto, propName, {\n      get(this: LitElement) { return queryFn(this.renderRoot!, selector); },\n      enumerable : true,\n      configurable : true,\n    });\n  };\n}\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options: EventListenerOptions) =>\n    (proto: any, name: string) => {\n      // This comment is here to fix a disagreement between formatter and linter\n      Object.assign(proto[name], options);\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {TemplateResult} from 'lit-html';\nimport {render} from 'lit-html/lib/shady-render';\n\nimport {PropertyValues, UpdatingElement} from './lib/updating-element.js';\n\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport {html, svg} from 'lit-html/lit-html';\n\nexport class LitElement extends UpdatingElement {\n\n  /**\n   * Render method used to render the lit-html TemplateResult to the element's\n   * DOM.\n   * @param {TemplateResult} Template to render.\n   * @param {Element|DocumentFragment} Node into which to render.\n   * @param {String} Element name.\n   */\n  static render = render;\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValues) {\n    super.update(changedProperties);\n    const templateResult = this.render() as any;\n    if (templateResult instanceof TemplateResult) {\n      (this.constructor as typeof LitElement)\n          .render(templateResult, this.renderRoot!,\n                  {scopeName : this.localName!, eventContext : this});\n    }\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   * @returns {TemplateResult} Must return a lit-html TemplateResult.\n   */\n  protected render() {}\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as any).polyfillWrapFlushCallback !== undefined;\n\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      let node = start;\n      while (node !== end) {\n        const n = node!.nextSibling;\n        container.insertBefore(node!, before as Node);\n        node = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes =\n    (container: Node, startNode: Node|null, endNode: Node|null = null):\n        void => {\n          let node = startNode;\n          while (node !== endNode) {\n            const n = node!.nextSibling;\n            container.removeChild(node!);\n            node = n;\n          }\n        };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\nexport const isPrimitive = (value: any) =>\n    (value === null ||\n     !(typeof value === 'object' || typeof value === 'function'));\n\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n  element: Element;\n  name: string;\n  strings: string[];\n  parts: AttributePart[];\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      this.parts[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): any {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (v != null &&\n            (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        } else {\n          text += typeof v === 'string' ? v : String(v);\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue());\n    }\n  }\n}\n\nexport class AttributePart implements Part {\n  committer: AttributeCommitter;\n  value: any = undefined;\n\n  constructor(comitter: AttributeCommitter) {\n    this.committer = comitter;\n  }\n\n  setValue(value: any): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\nexport class NodePart implements Part {\n  options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: any = undefined;\n  _pendingValue: any = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Inserts this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n   * its next sibling must be static, unchanging nodes such as those that appear\n   * in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part._insert(this.startNode = createMarker());\n    part._insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Appends this part after `ref`\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref._insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: any): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    const value = this._pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this._commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this._commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this._commitNode(value);\n    } else if (Array.isArray(value) || value[Symbol.iterator]) {\n      this._commitIterable(value);\n    } else if (value.then !== undefined) {\n      this._commitPromise(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private _commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this._insert(value);\n    this.value = value;\n  }\n\n  private _commitText(value: string): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === Node.TEXT_NODE) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      node.textContent = value;\n    } else {\n      this._commitNode(document.createTextNode(\n          typeof value === 'string' ? value : String(value)));\n    }\n    this.value = value;\n  }\n\n  private _commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value && this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this._commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private _commitIterable(value: any): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart!.endNode);\n    }\n  }\n\n  private _commitPromise(value: Promise<any>): void {\n    this.value = value;\n    value.then((v: any) => {\n      if (this.value === value) {\n        this.setValue(v);\n        this.commit();\n      }\n    });\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  element: Element;\n  name: string;\n  strings: string[];\n  value: any = undefined;\n  _pendingValue: any = undefined;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: any): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    if (this._pendingValue === noChange) {\n      return;\n    }\n    const value = !!this._pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n    }\n    this.value = value;\n    this._pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  single: boolean;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\ndeclare global {\n  interface EventListenerOptions {\n    capture?: boolean;\n    once?: boolean;\n    passive?: boolean;\n  }\n}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  window.addEventListener('test', options as any, options);\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\nexport class EventPart implements Part {\n  element: Element;\n  eventName: string;\n  eventContext?: EventTarget;\n  value: any = undefined;\n  _options?: {capture?: boolean, passive?: boolean, once?: boolean};\n  _pendingValue: any = undefined;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n  }\n\n  setValue(value: any): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    if (this._pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this._pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(this.eventName, this, this._options);\n    }\n    this._options = getOptions(newListener);\n    if (shouldAddListener) {\n      this.element.addEventListener(this.eventName, this, this._options);\n    }\n    this.value = newListener;\n    this._pendingValue = noChange;\n  }\n\n  handleEvent(event: Event) {\n    const listener = (typeof this.value === 'function') ?\n        this.value :\n        (typeof this.value.handleEvent === 'function') ?\n        this.value.handleEvent :\n        () => null;\n    listener.call(this.eventContext || this.element, event);\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: any) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {lastAttributeNameRegex, marker, nodeMarker, rewritesStyleAttribute} from './template.js';\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  strings: TemplateStringsArray;\n  values: any[];\n  type: string;\n  processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: any[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isTextBinding = true;\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      html += s;\n      const close = s.lastIndexOf('>');\n      // We're in a text position if the previous string closed its last tag, an\n      // attribute position if the string opened an unclosed tag, and unchanged\n      // if the string had no brackets at all:\n      //\n      // \"...>...\": text position. open === -1, close > -1\n      // \"...<...\": attribute position. open > -1\n      // \"...\": no change. open === -1, close === -1\n      isTextBinding =\n          (close > -1 || isTextBinding) && s.indexOf('<', close + 1) === -1;\n\n      if (!isTextBinding && rewritesStyleAttribute) {\n        html = html.replace(lastAttributeNameRegex, (match, p1, p2, p3) => {\n          return (p2 === 'style') ? `${p1}style$${p3}` : match;\n        });\n      }\n      html += isTextBinding ? nodeMarker : marker;\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * Sate management convenience\n */\nexport default class EventLinker {\n\n  /**\n   * Construct default state\n   * @param {Element} root requiring event linking\n   * @param {Boolean} debug optional, proivide true to enable;\n   * otherwise defaults to false.\n   */\n  constructor(root, debug=false) {\n    this.root = root;\n    this.listenables = [];\n    this.dispatched = [];\n    this.debug = debug;\n  }\n\n  /**\n   * Register events interested in\n   * @param {String} event\n   * @param {Array} forElements\n   * @param {function} doAction that will be bind() to the context provided\n   * at construction\n   */\n  listener(event, forElements, doAction) {\n    this.listenables.push({eventName: event, elementNames: forElements, fn: doAction});\n  }\n\n  /**\n   * start Listening to events interested in dispatched by a listenable\n   * @param {Element} listenable\n   */\n  startListening(listenable) {\n    let listenableName;\n    if (listenable.self === window) {\n      listenableName = 'window';\n    } else if (listenable === this.root) {\n      listenableName = 'this';\n    } else {\n      listenableName = listenable.tagName;\n    }\n\n    this.listenables.map((entry) => {\n      entry.elementNames.map((name) => {\n        if (name.toUpperCase() === listenableName.toUpperCase()) {\n          const listenerFn = entry.fn;\n          const boundFn = listenerFn.bind(this.root);\n          if (entry.eventName === 'observable') {\n            this.observeContentChange(boundFn, listenable);\n          } else {\n            listenable.addEventListener(entry.eventName, this.wrap(boundFn));\n          }\n        }\n      });\n    });\n  }\n\n  wrap(fn) {\n    if (!this.debug) {\n      return fn;\n    } else {\n      return function(...args) {\n        console.log(`calling ${fn.name}`);\n        return fn(...args);\n      };\n    }\n  }\n\n  /**\n   * register a dispatching config\n   * @param {String} fromElement\n   * @param {String} event\n   */\n  dispatcher(fromElement, event) {\n    this.dispatched.push({source: fromElement, eventName: event});\n  }\n\n  /**\n   * Dispatch for registered events\n   * @param {String} eventName\n   * @param {Object} data\n   */\n  dispatch(eventName, data) {\n    this.dispatched.map((dispatchable) => {\n      if (dispatchable.eventName === eventName) {\n        let source;\n        if (dispatchable.source === 'this') {\n          source = this.root;\n        } else {\n          source = dispatchable.source;\n        }\n        if (data) {\n          const detail = {detail: data};\n          const event = new CustomEvent(dispatchable.eventName, detail);\n          source.dispatchEvent(event);\n        } else {\n          const event = new CustomEvent(dispatchable.eventName);\n          source.dispatchEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * util function that creates and triggers the observation of the content of a\n   * given node.\n   *\n   * @param {function} handleInputFn function to handle the mutation\n   * @param {Element} observable element to observe\n   * @return {MutationObserver} observer\n   */\n  observeContentChange(handleInputFn, observable) {\n    // Options for the observer (which mutations to observe)\n    const config = {attributes: false, childList: true, subtree: false};\n    const observer = new MutationObserver(function(mutations) {\n      mutations.forEach(function(mutation) {\n        if (mutation.type === 'childList'\n            && mutation.target.nodeName === observable.tagName.toUpperCase()) {\n          const input = mutation.target.innerHTML;\n          try {\n            if (input) {\n              handleInputFn(input, observable);\n            }\n          } catch (e) {\n            throw e;\n          }\n        }\n      });\n    });\n\n    // Start observing the target node for configured mutations\n    observer.observe(observable, config);\n    return observer;\n  }\n\n}\n\n","import {Index} from '../shared';\nimport {clone} from '../shared/util';\n\n/**\n * Url lifecycle\n */\nexport default class Url {\n\n  /**\n   *\n   * @param {String} home title\n   * @param {EventLinker} register\n   * @param {Window} windowImpl optional test window implementation\n   * @param {History} historyImpl optional test history implementation\n   * @param {Document} documentImpl optional test document implementation\n   */\n  constructor(register, windowImpl = window, historyImpl = history, documentImpl = document) {\n    this.history = historyImpl;\n    this.document = documentImpl;\n    // this.title = home;\n    const loc = windowImpl.location;\n    this.openHash = !!loc.hash;\n    this.window = windowImpl;\n    this.origin = loc.origin;\n    this.pathname = loc.pathname;\n    this.hash = loc.hash;\n    this.register = register;\n\n    // init crumbs\n    this.crumbs = [];\n    // this.crumbs.push(new Crumb(this.getHome(), home));\n  }\n\n  syncCurrentLocation() {\n    const title = this.title;\n    this.history.pushState({}, title, this.getUrl());\n    this.document.title = title;\n    return this.getCrumbs();\n  }\n\n  getHome() {\n    return this.origin + this.pathname;\n  }\n\n  getUrl() {\n    return this.origin + this.pathname + this.hash;\n  }\n\n  getCrumbs() {\n    return clone(this.crumbs);\n  }\n\n  updateWithIndex(index) {\n    const idx = index.detail;\n    this.index = new Index(idx.sections, idx.stories, idx.defaultStory);\n    // clear all crumbs except first\n    // if (this.crumbs.length > 1) {\n    //   this.crumbs = [this.crumbs[0]];\n    // }\n    this.crumbs = [];\n\n    // sections\n    this.index.sections.map((section) => {\n      this.crumbs.push(new Crumb(section.url, section.title, 'section'));\n    });\n    // story\n    if (this.hash && this.hash.length > 1) {\n      const parts = this.hash.split('/');\n      const url = parts[parts.length - 1];\n      const story = this.index.getStoryByUrl(url);\n      if (story) {\n        this.crumbs.push(new Crumb(url, story.title));\n      }\n    } else {\n      const defaultStory = this.index.getDefault();\n      this.crumbs.push(new Crumb(defaultStory.url, defaultStory.title, 'story'));\n    }\n  }\n\n\n  updateWithHash(event) {\n    const hashSplit = event.newURL.split('#');\n    const hash = hashSplit[1];\n\n    if (hash !== this.hash) {\n      this.hash = `#${hash}`;\n      const elements = hashSplit[0].split('/');\n      this.origin = elements[0] + '//' + elements[2];\n      elements.splice(0, 3);\n      this.path = elements.join('/');\n\n      // clear all crumbs except first\n      if (this.crumbs.length > 1) {\n        this.crumbs = [this.crumbs[0]];\n      }\n      this.updateHash(hash);\n    }\n  }\n\n  updateHash(hash) {\n    if (this.openHash || hash !== this.hash) {\n      this.openHash = false;\n      this.hash = hash;\n      // dispatch event to wait for index update\n      this.register.dispatch('mkdn-nav-hash-url', hash);\n    }\n  }\n\n  updateStory(storyDef) {\n    if (this.crumbs[this.crumbs.length - 1].type === 'story') {\n      this.crumbs.splice(this.crumbs.length - 1, 1);\n    }\n    this.crumbs.push(new Crumb('#'+storyDef.url, storyDef.title, 'story'));\n    this.updateHash(`#${storyDef.url}`);\n  }\n\n  updateHome(url, title) {\n    this.crumbs[0] = new Crumb(url, title, 'home');\n  }\n\n}\n\n/**\n * Crumb\n */\nexport class Crumb {\n\n  constructor(url, title, type) {\n    this.url = url;\n    this.title = title;\n    this.type = type;\n  }\n\n}\n","import {html}         from '@polymer/lit-element/lit-element.js';\nimport {repeat}       from 'lit-html/directives/repeat';\nimport {ChildElement} from '../shared/child-element';\nimport EventLinker    from '../shared/eventLinker';\nimport styles         from './mkdn-nav.css.js';\nimport Url            from './mkdn-nav.url';\n\n/**\n * MkDn Navigation component\n */\nexport class MkdnNav extends ChildElement {\n\n  static get name() {\n    return 'mkdn-nav';\n  }\n\n  /**\n   * watched properties\n   * @return {Object}\n   */\n  static get properties() {\n    return {\n      crumbs: {type: Array, attribute: false},\n      delimiter: {type: String},\n      view: {type: String},\n      state: {type: Object, attribute: false},\n    };\n  }\n\n  /**\n   * constructor\n   */\n  constructor() {\n    super();\n    this.delimiter = '>';\n    this.register = new EventLinker(this);\n    this.url = new Url(this.register);\n    this.crumbs = this.url.syncCurrentLocation();\n    this.register.listener('hashchange', ['window'], this.onHashChange);\n    this.openedWithHash = window.location.hash;\n  }\n\n  connectedCallback() {\n    this.findParent(this.view, {byId: true});\n  }\n\n  initOrphaned() {\n    this.register.listener('observable', ['this'], this.onElementContentChange);\n    this.register.startListening(this);\n    this.onElementContentChange(this.innerHTML);\n  }\n\n  initAdopted(parent) {\n    this.register.listener('mkdn-store-index-updated', ['mkdn-store', 'mkdn-static-store'], this.onSelection);\n    this.register.listener('mkdn-store-story', ['mkdn-store'], this.onStoryLoaded);\n    this.register.dispatcher('this', 'mkdn-nav-hash-url');\n\n    this.register.startListening(window);\n\n    // this.url.updateHome(window.location.href, 'home');\n\n    this.ready();\n  }\n\n  onSelection(evt) {\n    this.url.updateWithIndex(evt);\n    this.crumbs = this.url.syncCurrentLocation();\n  }\n\n  onHashChange(evt) {\n    this.url.updateWithHash(evt);\n    this.crumbs = this.syncCurrentLocation();\n  }\n\n  onSiblingReady(sibling) {\n    switch (sibling.Class) {\n      case 'mkdn-store':\n      case 'md-static-store':\n        if (window.location.hash) {\n          this.register.dispatch('mkdn-nav-hash-url', window.location.hash.substr(1));\n        }\n        this.register.startListening(sibling);\n        break;\n    }\n  }\n\n  /**\n   * render element\n   * @return {TemplateResult}\n   */\n  render() {\n    return html`\n      ${styles(this.delimiter)} \n      ${this.renderCrumbs()}`;\n  }\n\n  /**\n   * @return {TemplateResult}\n   */\n  renderCrumbs() {\n    if (this.crumbs && this.crumbs.length > 0) {\n      return html`\n          <ul class=\"mkdn-list\">\n          ${repeat(this.crumbs,\n                   (crumb) => {\n                     return crumb.url;\n                   },\n                   (crumb) => {\n                     return html`<li><a href=\"${crumb.url}\">${crumb.title}</a></li>`;\n                   })}\n          </ul>`;\n    } else {\n      return html`<ul class=\"mkdn-list\"><li>&nbsp;</li></ul>`;\n    }\n  }\n\n  static updatePageLink(root) {\n    const crumb = root.crumbs[root.crumbs.length - 1];\n    history.pushState({}, crumb.name, crumb.url);\n    document.title = crumb.name;\n  }\n\n  onElementContentChange(input) {\n    if (input) {\n      this.crumbs = JSON.parse(input.trim());\n      MkdnNav.updatePageLink(this);\n    }\n  }\n\n  onStoryLoaded(event) {\n    const storyDef = event.detail;\n    this.url.updateStory(storyDef);\n    this.crumbs = this.url.syncCurrentLocation();\n  }\n\n\n}\n\nMkdnNav.define();\n\n","import { html } from '@polymer/lit-element/lit-element.js';\n\nexport default function styles(delimiter) {\n\n\t// language=HTML\n\treturn html`<style>\n    /* Style the list */\n    .mkdn-list {\n        padding:0;\n        margin:0;\n        list-style: none;\n        /*background-color: #eee;*/\n    }\n\n    /* Display list items side by side */\n    .mkdn-list li {\n        display: inline;\n        /*font-size: 18px;*/\n    }\n\n    /* Add a slash symbol (/) before/behind each list item */\n    .mkdn-list li + li:before {\n        padding: 0.2rem;\n        color: black;\n        content: \"${delimiter}\";\n    }\n\n    /* Add a color to all links inside the list */\n    .mkdn-list li a {\n        /*color: #0275d8;*/\n        text-decoration: none;\n    }\n\n    /* Add a color on mouse-over */\n        .mkdn-list li a:hover {\n        /*color: #01447e;*/\n        text-decoration: underline;\n    }\n</style>    `;\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = new Map<TemplateStringsArray, Template>();\n    templateCaches.set(result.type, templateCache);\n  }\n  let template = templateCache.get(result.strings);\n  if (template === undefined) {\n    template = new Template(result, result.getTemplateElement());\n    templateCache.set(result.strings, template);\n  }\n  return template;\n}\n\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches =\n    new Map<string, Map<TemplateStringsArray, Template>>();\n"],"sourceRoot":""}